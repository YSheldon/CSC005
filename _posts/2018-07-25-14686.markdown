---
layout: post
title: I Know What You Did Last Month: A New Artifact of Execution on macOS 10.13
date: 2018-07-25 11:02:12
tourl: https://www.crowdstrike.com/blog/i-know-what-you-did-last-month-a-new-artifact-of-execution-on-macos-10-13/
tags: [Crowdstrike]
---
Analysts that perform macOS forensics have had few, if any, artifacts of program execution to rely on during investigations  until now. In macOS 10.13 (High Sierra), Apple introduced CoreAnalytics, which is a system diagnostics mechanism that maintains a record of Mach-O programs that have executed on a system over approximately one month. CoreAnalytics can serve a number of valuable analytical purposes for both insider threat investigations and incident response. The artifact can be used to:This article provides a technical overview and analysis of the CoreAnalytics artifacts found in macOS 10.13, as well as a means for investigators to parse this artifact into a more digestible format.The CoreAnalytics artifact provides a historical and current perspective on program execution, on a near-daily basis. This data is derived from two sources:The diagnostic period is defined within the In light of this artifact, we have written a An application execution record may appear as below in a Figure 1: CoreAnalytics record example for Google Chrome.When parsed by CoreAnalyticsParser, the same record will appear as:Figure 2: The CoreAnalytics record from Fig. 1, parsed into JSON by the CoreAnalyticsParser script.The script can run on a live system or run against a directory that contains either CoreAnalytics or aggregate files.The The analytics daemon, which is responsible for producing and gathering system analytics and diagnostics data, maintains information about previously-written CoreAnalytics files in In the The first record in the Figure 3: The first line of a The time that the diagnostic period began can be found in the following JSON record which begins with Figure 4: The second line of a The CoreAnalytics files are written to the Table 1: Example of a perfect cutover between These files are typically generated in the Figure 5: Contents of the However, our testing shows that the report is generally written at the first sleep or shutdown after the submission time has passed.After the timestamp and marker records, the records produced by the Figure 6: Example of two records that reveal system usage information.Immediately afterward, two records appear that indicate two-hour and one-day heartbeats. The significance of these lines is yet unclear, as these heartbeats do not appear to correlate with the duration of the diagnostic period or the uptime of any of the programs recorded. The field name Figure 7: Heartbeat records.All of the lines that follow are comprised of three keys: Table 2: Common subsystems that report to the analytics daemon and their UUIDs.Our testing has shown that the UUIDs above are consistent across several systems running macOS 10.13.4 and 10.13.5. This would suggest that the UUIDs are associated exclusively with the subsystem and its particular version, and may be updated as Apple makes modifications to the subsystems in the future.The Figure 8: Sample The nine fields under The data is stored in the following format in the CoreAnalytics record:Figure 9: Data Format of CoreAnalytics RecordBelow are the keys that were used to populate the record above, from the Figure 10: Keys from If the program was run as an independent Mach-O executable, or the In the example below, the Figure 11: Value of Figure 12: If the program was run as an independent Mach-O executable, or the In some cases, as shown below, the Figure 13: CoreAnalytics Record for Unnamed ProgramFigure 14: CoreAnalytics Record for DockIn our testing, we identified that a different subsystem, Figure 15: CoreAnalytics record for Microsoft OneNote, produced by a different analytics subsystem.The Figure 16: Aggregate data for Google Chrome.The values correspond to the following fields that would normally appear in a CoreAnalytics record produced by the Figure 17: Array structure for aggregate data.By parsing out the array of values in an aggregate file and correlating them with the fields above, it becomes possible to analyze application usage information for the current day, before it is written out to a CoreAnalytics file.CoreAnalytics provides a trove of information about the usage of a system and its applications. Program execution history that covers a month of activity can serve a crucial purpose in investigations where collection of evidence is not immediately feasible. Though documentation from Apple may provide additional clarity into the purpose of certain fields and the nature of their values, the analysis above provides a strong basis on which analysts can begin to investigate application activity on macOS systems. CrowdStrikeŽ is excited to join more than 17,000 security experts in Las Vegas this August fortttttttttttttttttttttIntroduction This blog introduces some of the innovative techniques the CrowdStrike Data Science team is usingtttttttttttttttttttttUpdate: While this blog post originally covered the Office 365 Activities API, that functionality has beentttttttttttttttt