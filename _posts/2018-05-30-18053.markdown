---
layout: post
title: Why bad coding habits die hardand 7 ways to kill them May 23, 2018 - When it comes to poorly-written code, we're quick to blame programmers without thinking about why bad coding habits form in the first place. Here are seven ways to nip that in the bud.CONTINUE READING
date: 2018-05-30 00:02:7
tourl: https://blog.malwarebytes.com/101/2018/05/bad-code-wont-die-7-ways-kill/
tags: [Flame,Tick,Source]
---
Developers are usually the focus of blame when software vulnerabilities cause organizational breaches. (Sometimes, quality assurance engineers are included in the flame.) Interestingly, though, hardly anyone looks at WeÂre talking about the culture, the processes, the unrealistic deadlines, andÂperhaps the worst of this bunchÂthe lack of awareness between the business and development sides. The former must realize that as they innovate, they need to adapt and respond to the ever-changing threat landscape; the latterÂ must know how to write good, clean, secure code.Each organizational breach is a testament to something going wrong somewhere. And itÂs a lot more complicated than assuming developers are just lazy at coding. To understand whatÂs really going on, weÂve listed some of the reasons Most of us assume that programmers, well-versed in multiple programming languages as they are, should also know how to write secure code. This just isnÂt true. According toÂ While computer science, information systems, and computer engineering students are taught how to code, accredited schools are simply not teaching them security by design. Secure coding is now something programmers must educate themselves on how to do.Software developers are expected to adhere to rigid deadlines. No ifs, ands, or buts. On top of this, they also have to balance conflicting interests from multiple stakeholders, refine code functionalities, and ensure that the program is reliable and stable. Programmers have to tick several more boxes before reaching the bottom of the list, where security is. In fact, itÂs more common for programmers to skip security checks, so they deploy the program as-is: a working, efficient, but vulnerable product.Essentially, itÂs half-baked.As much as software developers would want to keep their code as risk-free as possible, they cannot. The tools needed for this are expensive and can be a hard sell for organizations that have budget constraints or who utterly fail to grasp the importance of reducing software vulnerabilities.Vulnerable software is the bane of business organizations. In this age of breaches, youÂd think itÂs only logical for organizations to secure vulnerable software, starting with their own. Yet,Â bad code remains prevalent to this day. ItÂs up to management to take charge and prioritize security in the development process. By adopting any or all of these suggestions to eradicate bad code, businesses can not only help software developers do a better job, but also potentially secure their reputation, data, and ongoing survival.Shall we begin?Training is perhaps the best and most effective way to get software developers to improve their coding. To do this, management has several options: invite a third-party organization to conduct training, have their software engineers enroll in workshops outside of the workplace, or have them register for online classes.Should they decide to hire a third party, there are some private institutions they can turn to. Depending on the programming languages your developers are using, upper management must establish secure coding standards they can adhere to. Thankfully, they donÂt have to start from scratch. There are A convention includes recommended programming styles, methods, and other coding practices. Adhering to one significantly lessens errors, makes the source code readable to other programmers, and is easier to maintain in the long run.Make no mistake: secure coding should be as important to company culture as it is to the overall software development process. The aim of having such a culture is to imbibe security practices so deep that they become second nature. These practices grow into valuable traits programmers can take with them anywhere.As we keep saying, security is no longer the job of one department in a company. It is now everyoneÂs job to ensure that sensitive client information is kept safe and secure, and to think twice before clicking that link or opening that email attachment. If security is stressed as an important part of company culture, that mindset can extend beyond staving off breaches to keeping your customers just as safe.A policy is vital to have as this guides software developers not only on what security features to bake into their applications, but also how these should be implemented. Unfortunately, organizations often overlook this, leaving their applications, intellectual property, and other vital information open to compromise. Embedding a security policy to the SDLC is a must. If the company makes their product available to the European market, then embedding Bug bounties in general are Rigid timelines may get the job done, but they also encourage sloppy coding. A finished product doesnÂt mean itÂs a secure one. If security checks on code are usually ignored because of the project schedule, wouldnÂt it be better for project managers to set the timeline with a little padding in case something happens and the target date isnÂt met?TodayÂs threat landscape no longer allows half-baked applications. A slight schedule slippage can be remedied, but a breach due to flaws that wouldnÂt have been missed during code reviews could cause more problems and unnecessary expenditures for the company.This can be done by creating an environment where developers are not only required to meet standards, but want to. One way is ensuring that software programmers have the tools and equipment they need. For app developers, they may require several mobile devices (phones and tablets) they can use for testing.Upper management must also work closely with team and project leaders to provide programmers access to necessary information they need for the project and people they can reach out to for advice. Other things that are important to developers are ergonomic furniture, a fast PC, a personal space where they can work quietly and privately, writing materials and whiteboards, and an RR area where they can meet with other employees. Should upper management set up an incentive program for good coding? It might be the natural step to takeÂalthough, A word on Every company looking to improve their overall security posture, beginning with addressing the problem of bad code, should know that a 100 percent turnaround isnÂt possible at the onset. Change is usually slow. However, after about a year of baking security into the coding process, expect a highly significant return on investment. This was the result of Code that works is well-designed, efficient, usable, readable, and (most importantly) secure. It is not impossible to achieve. All organizations have to do is start getting rid of bad coding habits.