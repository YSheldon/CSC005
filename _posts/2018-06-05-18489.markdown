---
layout: post
title: Try Using Webex Teams APIs with AppDynamics to Create a Triage Webex Teams Space
date: 2018-06-05 00:02:1
tourl: https://blogs.cisco.com/developer/webex-teams-apis-with-appdynamics-triage-space
tags: [Scripting]
---
tttWhat is great about Cisco Webex Teams is that I can start working on the desktop client and pick up where I left off when I go mobile via my iOS or Android client. Since both the desktop and mobile clients support notifications, I never have to worry about receiving an important message from a team that Im collaborating with. In addition to these benefits, there are a number of APIs that allow you to create Recently Ive had the opportunity to get to work with the powerful tools that This opens up a variety of use cases where we can take advantage of the Webex Teams APIs to do really cool things! For example, we could Lets get started!I already have AppD monitoring a couple of my own Webex Teams Bots, so lets setup App Dynamics and a Webex Teams Bot to do the following in case a server Im monitoring restarts. Here is a high level view of the architecture.When AppD discovers a restart, I would like the following to happen:Here is a high-level view of the call flow.AppDynamics/Triage WebEx Teams Bot High Level Call Flow In order for the monitor and alert functionality to work on AppDynamics, you need to create a Policy that defines the criteria that you want to monitor and the action that you want to take. In order to do this, log into your controller and click the AlertRespond Tab. Once you are on the AlertRespond Tab, you will want to choose your application from the drop down menu and then click Policies. This will take you to a list where you can edit, delete and create new policies.Path to creating your Alert and Respond Policy for your application workflow.If you have not already done so, create/add a policy.The monitoring criteria can be performance metrics, health rules related to business transaction performance or specific events like a server restart. It can really be anything you like. For example, say some of your business transactions start slowing down to unacceptable level. Trigger the alert! For the sake of simplicity, Ive decided to go with a simple server restart.In order to take action with an HTTP Request, we first have to define an HTTP Request Template. With the policy and HTTP Request defined for our case, when a server that we are monitoring restarts, the AppD controller will fire an HTTP Request to our AppD Triage Bot.Creating an HTTP Request Template is fairly straight forward and Id recommend checking out the documentation for a quick primer. The main things you will need to fill out in the form includes:It is this HTTP Request Payload that we need to customize that will allow us to really differentiate our bot and provide a lot of context to our Webex Teams triage space. The body will be a JSON dictionary that will contain two arrays, defined in the following way:The team members are pretty easily populated, but how do we get events? Well, fortunately, the gurus at AppD allow scripting of the here is the JSON body snippet for the payload template:Lets break it down. The first dictionary entry, When the HTTP Request is fired, the JSON body looks something like this:The resulting JSON body looks like this:Now that we have created the HTTP Template, we need to go back into the Policy we created and assign an action. So go back, edit your policy, select Actions and then add the newly created HTTP Template.Adding an action to our newly created policy. Now lets look at the Triage Bot code. It is a simple Python based Flask application that takes the request, parses the JSON payload, and creates the Webex Teams space. So lets break down the code.The first part is standard pretty simple. We take the HTTP request, verify its coming from our AppD controller via a token embedded in the request and then fire a function, build_triage_room, that takes the request payload and builds the space. We will do the following:Now lets take a look at how we do this in code:Here is a screenshot of the finished product!Newly created Triage Webex Teams space. Note the hyperlink which will take the team members directly to the issue within AppDynamics.So, to wrap up, we took two different Cisco products and tied them together to make something greater than the sum of their parts. We utilized AppDynamics alerting and monitoring functionality to trigger a Cisco Webex Teams Bot to:Hopefully you can see the possibilities that leveraging the AppD functionality and Cisco Webex Teams APIs allow. The code for the bot can be found on the Good Luck!Tags:We'd love to hear from you! To earn points and badges for participating in the conversation, join 