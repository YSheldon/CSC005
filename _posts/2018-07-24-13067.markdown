---
layout: post
title: Spectre rises from the dead to bite Intel in the return stack buffer
date: 2018-07-24 13:02:11
tourl: /2018/07/23/spectre_return_stack_buffer/
tags: [Attack]
---
Spectre, a class of vulnerabilities in the speculative execution mechanism employed in modern processor chips, is living up to its name by proving to be unkillable.Despite a series of mitigations proposed by The findings also revive doubts about whether current and past chip designs can ever be truly fixed.Only two weeks ago, researchers Vladimir Kiriansky and Carl Waldspurger Now there's another called SpectreRSB that exploits the return stack buffer (In a paper titled These researchers, incidentally, are among those who developed the SafeSpec mitigation.The latest data-theft technique involves forcing the processor to misspeculate using the RSB. Using a The paper, dated July 20, outlines the steps involved in the SpectreRSB attack, which itself has six variants:"(1) after a context switch to the attacker, s/he flushes shared address entries (for flush reload). The attacker also pollutes the RSB with the target address of a payload gadget in the victims address space; (2) the attacker yields the CPU to the victim; (3) The victim eventually executes a return, causing speculative execution at the address on the RSB that was injected by the attacker. Steps 4 and 5 switch back to the attacker to measure the leakage."The paper also provides some sample code:The researchers have tested SpectreRSB on Intel Haswell and Skylake processors and the SGX2 secure enclave in a Core i7 Skylake chip. They did not test AMD nor Arm cores but note that both chipmakers use RSBs and so they reported their findings to them just in case, as well as to Chipzilla.The eggheads claimed "none of the known defenses including [Google's] Retpoline and Intels microcode patches stop all SpectreRSB attacks."A spokesperson for Intel told us the Xeon maker believes its mitigations do thwart SpectreRSB side-channel shenanigans:SpectreRSB is related to Branch Target Injection (CVE-2017-5715), and we expect that the exploits described in this paper are mitigated in the same manner. We have already published guidance for developers in the whitepaper, Speculative Execution Side Channel Mitigations. We are thankful for the ongoing work of the research community as we collectively work to help protect customers.You can find Intel's Last week, researchers at Dartmouth suggested a defense against Spectre variant one, to which Intel previously proposed adding the LFENCE instruction to code as a defense against speculative execution.The Dartmouth solution involves using something called ELFbac policy techniques. In an email to "The permissions set here for the page-tables are also respected by the speculative execution branches, and hence if the developer intends to protect certain secrets within the program, the attacker exploiting Spectre would still not be able to gain access to these secrets," he said. "These policies are defined at the ABI-level using the existing capabilities of the static linker and the build tool-chain."Anantharaman said the technique, which is enforced through Linux kernel memory management mechanisms, can be generalized for use against a larger class of intra-process memory attacks.Asked via email whether he's seen the Dartmouth research, Nael Abu-Ghazaleh, professor of computer science and engineering at UC Riverside and a coauthor of the SpectreRSB paper, told "From the information I can find it has a strong flavor of basically doing the KPTI solution but at the user level software (i.e., map regions of memory where the secrets are only when you need them)," he said. "This is likely to have a substantial performance overhead, especially if the secret data is accessed often. Moreover, the programmer has to be disciplined enough to isolate all the secret data."Abu-Ghazaleh said there's value in software-based fixes, but it's not enough.As computer science researcher Daniel Genkin "Although patching is important, we need to consider this class of vulnerability in the design of new processors to completely address the problem," he said. Ž