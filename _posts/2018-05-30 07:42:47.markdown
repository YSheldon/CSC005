title:Why bad coding habits die hard—and 7 ways to kill them May 23, 2018 - When it comes to poorly-written code, we're quick to blame programmers without thinking about why bad coding habits form in the first place. Here are seven ways to nip that in the bud.CONTINUE READING
date:2018-05-30 07:42:47
tourl:https://blog.malwarebytes.com/101/2018/05/bad-code-wont-die-7-ways-kill/
tags:[attack]
On April 30, Bitdefender researchers became aware of a new version of the Hide and Seek bot Historically, the botnet infected close to 90,000 unique devices from the time of discovery until today, with ups and downs on each update. The new samples identified in late April don’t add functionality, but feature plenty of improvements on the propagation side. For instance, the new binaries now include code to leverage two new vulnerabilities (more about this The sample discovered also targets several generic devices. Infected victims scan for neighbouring peers for the presence of the telnet service. As soon as the telnet service is found, the infected device attempts to bruteforce acces. If the login succeds, the malware restricts access to port 23 to potentially prevent a competing bot from hijacking the device. This attack avenue targets a wide range of devices and architecture. Our research shows that the bot has Once the infection has been performed successfully, the malware copies itself in the It subsequently opens a random UDP port that is propagated to the neighboring bots. This port will be used by the cyber-criminals to get in touch with the device. The supported command list has not changed significantly from the previous version of the bot. There is still no support for DDoS attacks (one of the most frequently encountered features of IoT bots), which leaves extremely little room for monetizing the botnet. However, the bot itself can still exfiltrate files using the method Based on the evidence at hand, we presume that this botnet is in the growth phase, as operators are trying to seize as many devices as possible before adding weaponized features to the binary. The samples we used for this piece of research are identified as Bogdan Botezatu is living his second childhood at Bitdefender as senior e-threat analyst. When he is not documenting sophisticated strains of malware or writing removal tools, he teaches extreme sports such as surfing the web without protection or rodeo with wild Trojan horses. He believes that most things in life can be beat with strong heuristics and that antimalware research is like working for a secret agency: you need to stay focused at all times, but you get all the glory when you catch the bad guys. \t\t\t\r \r \t\t\r \r \t\r \r \r \t\r \r \t9ef7ed8af988d61b18e1f4d8c530249a1ce76d69 \t\t\t\t   \t\t\t\t\t\t\t   \t\t\t\r \t\t\r \t\t\r \t\r \r \r \t \t\t\tToday, Talos is publishing a glimpse into the most prevalent threats we’ve observed between May 18 and May 25. As with previous round-ups, this post isn’t meant to be an in-depth analysis. Instead, this post will summarize the threats we’ve observed by highlighting key behavioral characteristics, indicators of compromise, and discussing how our customers are automatically protected from these threats. As a reminder, the information provided for the following threats in this post is non-exhaustive and current as of the date of publication. Detection and coverage for the following threats is subject to updates, pending additional threat or vulnerability analysis. For the most current information, please refer to your Firepower Management Center, Snort.org, or ClamAV.net. Read more We'd love to hear from you! To earn points and badges for participating in the conversation, join  \t\t\tWe at Cisco have been delivering network orchestration and automation products for a number of years now. Our customers have deployed To start with, we see our customers gaining a more mature understanding the technical and operational transformation required to deploy NFV, and where they can expect return on investment for their NFV investment.  From this understanding, they are making the following demand of vendors: As the NFV market matures, Cisco NSO with NFVO and ESC have continued to build on our experience in the network orchestration.  We are happy to show customers how our Network Orchestration products can automate their NFV.  Following are some of our product capabilities that I would like to highlight: If you are looking for a vendor-agnostic Orchestration platform to automate your NFV initiative, Cisco NSO NFVO is up for the job.   Tags:We'd love to hear from you! To earn points and badges for participating in the conversation, join Thank you Greg for posting this product and technology update.  Please feel free to check out the Cisco NSO NFV Orchestration white paper at https://www.cisco.com/c/en/us/solutions/collateral/service-provider/solutions-cloud-providers/white-paper-c11-738702.html.\t\t\t\t\t\t  \t\t\t\t\t\t\tVery nice Blog. For best Industrial Automation Training in Delhi, India. Visit:- http://www.innovicindia.com/best-industrial-automation-training-institute-in-noida-delhi-ncr.php or call on 9811253572\t\t\t\t \t\t\t\tDevelopers are usually the focus of blame when software vulnerabilities cause organizational breaches. (Sometimes, quality assurance engineers are included in the flame.) Interestingly, though, hardly anyone looks at We’re talking about the culture, the processes, the unrealistic deadlines, and—perhaps the worst of this bunch—the lack of awareness between the business and development sides. The former must realize that as they innovate, they need to adapt and respond to the ever-changing threat landscape; the latter must know how to write good, clean, secure code. Each organizational breach is a testament to something going wrong somewhere. And it’s a lot more complicated than assuming developers are just lazy at coding. To understand what’s really going on, we’ve listed some of the reasons Most of us assume that programmers, well-versed in multiple programming languages as they are, should also know how to write secure code. This just isn’t true. According to While computer science, information systems, and computer engineering students are taught how to code, accredited schools are simply not teaching them security by design. Secure coding is now something programmers must educate themselves on how to do. Software developers are expected to adhere to rigid deadlines. No ifs, ands, or buts. On top of this, they also have to balance conflicting interests from multiple stakeholders, refine code functionalities, and ensure that the program is reliable and stable. Programmers have to tick several more boxes before reaching the bottom of the list, where security is. In fact, it’s more common for programmers to skip security checks, so they deploy the program as-is: a working, efficient, but vulnerable product. Essentially, it’s half-baked. As much as software developers would want to keep their code as risk-free as possible, they cannot. The tools needed for this are expensive and can be a hard sell for organizations that have budget constraints or who utterly fail to grasp the importance of reducing software vulnerabilities. Vulnerable software is the bane of business organizations. In this age of breaches, you’d think it’s only logical for organizations to secure vulnerable software, starting with their own. Yet, bad code remains prevalent to this day. It’s up to management to take charge and prioritize security in the development process. By adopting any or all of these suggestions to eradicate bad code, businesses can not only help software developers do a better job, but also potentially secure their reputation, data, and ongoing survival. Shall we begin? Training is perhaps the best and most effective way to get software developers to improve their coding. To do this, management has several options: invite a third-party organization to conduct training, have their software engineers enroll in workshops outside of the workplace, or have them register for online classes. Should they decide to hire a third party, there are some private institutions they can turn to. Depending on the programming languages your developers are using, upper management must establish secure coding standards they can adhere to. Thankfully, they don’t have to start from scratch. There are A convention includes recommended programming styles, methods, and other coding practices. Adhering to one significantly lessens errors, makes the source code readable to other programmers, and is easier to maintain in the long run. Make no mistake: secure coding should be as important to company culture as it is to the overall software development process. The aim of having such a culture is to imbibe security practices so deep that they become second nature. These practices grow into valuable traits programmers can take with them anywhere. As we keep saying, security is no longer the job of one department in a company. It is now everyone’s job to ensure that sensitive client information is kept safe and secure, and to think twice before clicking that link or opening that email attachment. If security is stressed as an important part of company culture, that mindset can extend beyond staving off breaches to keeping your customers just as safe. A policy is vital to have as this guides software developers not only on what security features to bake into their applications, but also how these should be implemented. Unfortunately, organizations often overlook this, leaving their applications, intellectual property, and other vital information open to compromise. Embedding a security policy to the SDLC is a must. If the company makes their product available to the European market, then embedding Bug bounties in general are Rigid timelines may get the job done, but they also encourage sloppy coding. A finished product doesn’t mean it’s a secure one. If security checks on code are usually ignored because of the project schedule, wouldn’t it be better for project managers to set the timeline with a little padding in case something happens and the target date isn’t met? Today’s threat landscape no longer allows half-baked applications. A slight schedule slippage can be remedied, but a breach due to flaws that wouldn’t have been missed during code reviews could cause more problems and unnecessary expenditures for the company. This can be done by creating an environment where developers are not only required to meet standards, but want to. One way is ensuring that software programmers have the tools and equipment they need. For app developers, they may require several mobile devices (phones and tablets) they can use for testing. Upper management must also work closely with team and project leaders to provide programmers access to necessary information they need for the project and people they can reach out to for advice. Other things that are important to developers are ergonomic furniture, a fast PC, a personal space where they can work quietly and privately, writing materials and whiteboards, and an RR area where they can meet with other employees. Should upper management set up an incentive program for good coding? It might be the natural step to take—although, A word on Every company looking to improve their overall security posture, beginning with addressing the problem of bad code, should know that a 100 percent turnaround isn’t possible at the onset. Change is usually slow. However, after about a year of baking security into the coding process, expect a highly significant return on investment. This was the result of Code that works is well-designed, efficient, usable, readable, and (most importantly) secure. It is not impossible to achieve. All organizations have to do is start getting rid of bad coding habits. 